diff --git a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIConsumer.java b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIConsumer.java
index f3edb073ec6..06d9a3e4ac2 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIConsumer.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/APIConsumer.java
@@ -462,12 +462,13 @@ public interface APIConsumer extends APIManager {
      * @param offset
      * @param groupingId   the groupId to which the applications must belong.
      * @param organization Identifier of an organization
+     * @param sharedOrganization 
      * @return Applications
      * @throws APIManagementException if failed to applications for given subscriber
      */
 
     Application[] getApplicationsWithPagination(Subscriber subscriber, String groupingId, int start, int offset,
-                                                String search, String sortColumn, String sortOrder, String organization)
+            String search, String sortColumn, String sortOrder, String organization, String sharedOrganization)
             throws APIManagementException;
 
     /**
diff --git a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Application.java b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Application.java
index 556746ea27c..e40003eeb9f 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Application.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/Application.java
@@ -58,6 +58,8 @@ public class Application {
     private String keyType;
     private int subscriptionCount;
     private String keyManager;
+    private String sharedOrganization;
+    
     public String getCreatedTime() {
         return createdTime;
     }
@@ -320,4 +322,12 @@ public class Application {
 
         this.organization = organization;
     }
+
+    public String getSharedOrganization() {
+        return sharedOrganization;
+    }
+
+    public void setSharedOrganization(String sharedOrganization) {
+        this.sharedOrganization = sharedOrganization;
+    }
 }
diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java
index ef5461ccbb3..31724f5aef0 100755
--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java
@@ -823,6 +823,7 @@ public final class APIConstants {
             "internal_application_mgt_delete", "internal_application_mgt_update", "internal_application_mgt_view",
             "internal_user_mgt_list"};
     public static final String KEY_MANAGER_CLIENT_APPLICATION_PREFIX = "wso2_apim_km_";
+    public static final String DEFAULT_APP_SHARING_KEYWORD = "private";
 
     public static final String TOKEN_URL = "TokenURL";
     public static final String REVOKE_URL = "RevokeURL";
diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConsumerImpl.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConsumerImpl.java
index ae44701e65d..bf3ab8f624d 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConsumerImpl.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/APIConsumerImpl.java
@@ -1664,6 +1664,9 @@ public class APIConsumerImpl extends AbstractAPIManager implements APIConsumer {
         if (StringUtils.isBlank(application.getCallbackUrl())) {
             application.setCallbackUrl(null);
         }
+        if (StringUtils.isEmpty(application.getSharedOrganization())) {
+            application.setSharedOrganization(APIConstants.DEFAULT_APP_SHARING_KEYWORD);
+        }
         int applicationId = apiMgtDAO.addApplication(application, userId, organization);
         Application createdApplication = apiMgtDAO.getApplicationById(applicationId);
 
@@ -1894,6 +1897,9 @@ public class APIConsumerImpl extends AbstractAPIManager implements APIConsumer {
             application.setApplicationAttributes(null);
         }
         validateApplicationPolicy(application, existingApp.getOrganization());
+        if (StringUtils.isEmpty(application.getSharedOrganization())) {
+            application.setSharedOrganization(APIConstants.DEFAULT_APP_SHARING_KEYWORD);
+        }
         apiMgtDAO.updateApplication(application);
         Application updatedApplication = apiMgtDAO.getApplicationById(application.getId());
         if (log.isDebugEnabled()) {
@@ -2786,19 +2792,20 @@ APIConstants.AuditLogConstants.DELETED, this.username);
      * @param sortColumn   The sort column.
      * @param sortOrder    The sort order.
      * @param organization Identifier of an Organization
+     * @param sharedOrganization 
      * @return Application[] The Applications.
      * @throws APIManagementException
      */
     @Override
     public Application[] getApplicationsWithPagination(Subscriber subscriber, String groupingId, int start, int offset
-            , String search, String sortColumn, String sortOrder, String organization)
+            , String search, String sortColumn, String sortOrder, String organization, String sharedOrganization)
             throws APIManagementException {
 
         if (APIUtil.isOnPremResolver()) {
             organization = tenantDomain;
         }
         return apiMgtDAO.getApplicationsWithPagination(subscriber, groupingId, start, offset,
-                search, sortColumn, sortOrder, organization);
+                search, sortColumn, sortOrder, organization, sharedOrganization);
     }
 
     /**
diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java
index 06decdd0970..40a4771b5b4 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/ApiMgtDAO.java
@@ -3497,6 +3497,7 @@ public class ApiMgtDAO {
             ps.setString(11, application.getUUID());
             ps.setString(12, String.valueOf(application.getTokenType()));
             ps.setString(13, organization);
+            ps.setString(14, application.getSharedOrganization());
             ps.executeUpdate();
 
             rs = ps.getGeneratedKeys();
@@ -3537,7 +3538,8 @@ public class ApiMgtDAO {
             ps.setString(5, null);
             ps.setTimestamp(6, new Timestamp(System.currentTimeMillis()));
             ps.setString(7, application.getTokenType());
-            ps.setInt(8, application.getId());
+            ps.setString(8, application.getSharedOrganization());
+            ps.setInt(9, application.getId());
 
             ps.executeUpdate();
 
@@ -4118,7 +4120,8 @@ public class ApiMgtDAO {
      * @throws APIManagementException
      */
     public Application[] getApplicationsWithPagination(Subscriber subscriber, String groupingId, int start,
-                                                       int offset, String search, String sortColumn, String sortOrder, String organization)
+            int offset, String search, String sortColumn, String sortOrder, String organization,
+            String sharedOrganization)
             throws APIManagementException {
 
         Connection connection = null;
@@ -4126,7 +4129,7 @@ public class ApiMgtDAO {
         ResultSet rs = null;
         Application[] applications = null;
         String sqlQuery = null;
-
+        boolean isOrgSharingEnabled = true; //TODO need to come from config or from user info
         if (groupingId != null && !"null".equals(groupingId) && !groupingId.isEmpty()) {
             if (multiGroupAppSharingEnabled) {
                 if (forceCaseInsensitiveComparisons) {
@@ -4147,9 +4150,19 @@ public class ApiMgtDAO {
             }
         } else {
             if (forceCaseInsensitiveComparisons) {
-                sqlQuery = SQLConstantManagerFactory.getSQlString("GET_APPLICATIONS_PREFIX_NONE_CASESENSITVE");
+                if (isOrgSharingEnabled) {
+                    sqlQuery = SQLConstantManagerFactory
+                            .getSQlString("GET_APPLICATIONS_PREFIX_NONE_CASESENSITVE_WITH_ORGSHARING");
+                } else {
+                    sqlQuery = SQLConstantManagerFactory.getSQlString("GET_APPLICATIONS_PREFIX_NONE_CASESENSITVE");
+                }
             } else {
-                sqlQuery = SQLConstantManagerFactory.getSQlString("GET_APPLICATIONS_PREFIX_CASESENSITVE");
+                if (isOrgSharingEnabled) {
+                    sqlQuery = SQLConstantManagerFactory
+                            .getSQlString("GET_APPLICATIONS_PREFIX_CASESENSITVE_WITH_ORGSHARING");
+                } else {
+                    sqlQuery = SQLConstantManagerFactory.getSQlString("GET_APPLICATIONS_PREFIX_CASESENSITVE");
+                }
             }
         }
 
@@ -4196,12 +4209,22 @@ public class ApiMgtDAO {
                     prepStmt.setInt(6, offset);
                 }
             } else {
-                prepStmt = connection.prepareStatement(sqlQuery);
-                prepStmt.setString(1, subscriber.getName());
-                prepStmt.setString(2, organization);
-                prepStmt.setString(3, "%" + search + "%");
-                prepStmt.setInt(4, start);
-                prepStmt.setInt(5, offset);
+                if (isOrgSharingEnabled) {
+                    prepStmt = connection.prepareStatement(sqlQuery);
+                    prepStmt.setString(1, subscriber.getName());
+                    prepStmt.setString(2, sharedOrganization);
+                    prepStmt.setString(3, organization);
+                    prepStmt.setString(4, "%" + search + "%");
+                    prepStmt.setInt(5, start);
+                    prepStmt.setInt(6, offset);
+                } else {
+                    prepStmt = connection.prepareStatement(sqlQuery);
+                    prepStmt.setString(1, subscriber.getName());
+                    prepStmt.setString(2, organization);
+                    prepStmt.setString(3, "%" + search + "%");
+                    prepStmt.setInt(4, start);
+                    prepStmt.setInt(5, offset);
+                }
             }
             if (log.isDebugEnabled()) {
                 log.debug("Query: " + sqlQuery);
@@ -4238,6 +4261,7 @@ public class ApiMgtDAO {
                 // Get custom attributes of application
                 Map<String, String> applicationAttributes = getApplicationAttributes(connection, applicationId);
                 application.setApplicationAttributes(applicationAttributes);
+                application.setSharedOrganization(rs.getString("SHARED_ORGANIZATION"));
 
                 applicationsList.add(application);
             }
diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java
index e52d62eaa65..0f4fcc9d6ee 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstants.java
@@ -1009,8 +1009,8 @@ public class SQLConstants {
     public static final String APP_APPLICATION_SQL =
             " INSERT INTO AM_APPLICATION (NAME, SUBSCRIBER_ID, APPLICATION_TIER, " +
             "   CALLBACK_URL, DESCRIPTION, APPLICATION_STATUS, GROUP_ID, CREATED_BY, CREATED_TIME, UPDATED_TIME, " +
-                    "UUID, TOKEN_TYPE, ORGANIZATION)" +
-            " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
+                    "UUID, TOKEN_TYPE, ORGANIZATION, SHARED_ORGANIZATION)" +
+            " VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
 
     public static final String UPDATE_APPLICATION_SQL =
             " UPDATE " +
@@ -1022,7 +1022,8 @@ public class SQLConstants {
             "   DESCRIPTION = ?, " +
             "   UPDATED_BY = ?, " +
             "   UPDATED_TIME = ?, " +
-            "   TOKEN_TYPE = ? " +
+            "   TOKEN_TYPE = ?, " +
+            "   SHARED_ORGANIZATION = ? " +
             " WHERE" +
             "   APPLICATION_ID = ?";
 
diff --git a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstantsH2MySQL.java b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstantsH2MySQL.java
index 03aead5993a..5c09b58ec01 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstantsH2MySQL.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.impl/src/main/java/org/wso2/carbon/apimgt/impl/dao/constants/SQLConstantsH2MySQL.java
@@ -181,7 +181,8 @@ public class SQLConstantsH2MySQL extends SQLConstants{
             "   GROUP_ID, " +
             "   UUID, " +
             "   APP.CREATED_BY AS CREATED_BY, " +
-            "   APP.TOKEN_TYPE AS TOKEN_TYPE " +
+            "   APP.TOKEN_TYPE AS TOKEN_TYPE, " +
+            "   APP.SHARED_ORGANIZATION AS SHARED_ORGANIZATION " +
             " FROM" +
             "   AM_APPLICATION APP, " +
             "   AM_SUBSCRIBER SUB  " +
@@ -212,7 +213,8 @@ public class SQLConstantsH2MySQL extends SQLConstants{
             "   GROUP_ID, " +
             "   UUID, " +
             "   APP.CREATED_BY AS CREATED_BY, " +
-            "   APP.TOKEN_TYPE AS TOKEN_TYPE " +
+            "   APP.TOKEN_TYPE AS TOKEN_TYPE, " +
+            "   APP.SHARED_ORGANIZATION AS SHARED_ORGANIZATION " +
             " FROM" +
             "   AM_APPLICATION APP, " +
             "   AM_SUBSCRIBER SUB  " +
@@ -227,6 +229,68 @@ public class SQLConstantsH2MySQL extends SQLConstants{
             " )x left join AM_BLOCK_CONDITIONS bl on  ( bl.TYPE = 'APPLICATION' AND bl.BLOCK_CONDITION = concat(concat(x.USER_ID,':'),x.name)) " +
             " ORDER BY $1 $2 limit ? , ?";
 
+    public static final String GET_APPLICATIONS_PREFIX_CASESENSITVE_WITH_ORGSHARING =
+            "select distinct x.*,bl.ENABLED from (" +
+            "SELECT " +
+            "   APPLICATION_ID, " +
+            "   NAME," +
+            "   APPLICATION_TIER," +
+            "   APP.SUBSCRIBER_ID,  " +
+            "   APP.CREATED_TIME AS APP_CREATED_TIME, " +
+            "   APP.UPDATED_TIME AS APP_UPDATED_TIME, " +
+            "   CALLBACK_URL,  " +
+            "   DESCRIPTION, " +
+            "   APPLICATION_STATUS, " +
+            "   USER_ID, " +
+            "   GROUP_ID, " +
+            "   UUID, " +
+            "   APP.CREATED_BY AS CREATED_BY, " +
+            "   APP.TOKEN_TYPE AS TOKEN_TYPE, " +
+            "   APP.SHARED_ORGANIZATION AS SHARED_ORGANIZATION " +
+            " FROM" +
+            "   AM_APPLICATION APP, " +
+            "   AM_SUBSCRIBER SUB  " +
+            " WHERE " +
+            "   SUB.SUBSCRIBER_ID = APP.SUBSCRIBER_ID " +
+            " AND (LOWER(SUB.USER_ID) = LOWER(?) OR APP.SHARED_ORGANIZATION = ? )" +
+            " AND " +
+             "   APP.ORGANIZATION = ? " +
+            " And "+
+            "    LOWER (NAME) like LOWER (?)"+
+            " )x left join AM_BLOCK_CONDITIONS bl on  ( bl.TYPE = 'APPLICATION' AND bl.BLOCK_CONDITION = concat(concat(x.USER_ID,':'),x.name)) " +
+            " ORDER BY $1 $2 limit ? , ?";
+    
+    public static final String GET_APPLICATIONS_PREFIX_NONE_CASESENSITVE_WITH_ORGSHARING =
+            "select distinct x.*,bl.ENABLED from (" +
+            "SELECT " +
+            "   APPLICATION_ID, " +
+            "   NAME," +
+            "   APPLICATION_TIER," +
+            "   APP.SUBSCRIBER_ID,  " +
+            "   APP.CREATED_TIME AS APP_CREATED_TIME, " +
+            "   APP.UPDATED_TIME AS APP_UPDATED_TIME, " +
+            "   CALLBACK_URL,  " +
+            "   DESCRIPTION, " +
+            "   APPLICATION_STATUS, " +
+            "   USER_ID, " +
+            "   GROUP_ID, " +
+            "   UUID, " +
+            "   APP.CREATED_BY AS CREATED_BY, " +
+            "   APP.TOKEN_TYPE AS TOKEN_TYPE, " +
+            "   APP.SHARED_ORGANIZATION AS SHARED_ORGANIZATION " +
+            " FROM" +
+            "   AM_APPLICATION APP, " +
+            "   AM_SUBSCRIBER SUB  " +
+            " WHERE " +
+            "   SUB.SUBSCRIBER_ID = APP.SUBSCRIBER_ID " +
+            " AND (LOWER(SUB.USER_ID) = LOWER(?) OR APP.SHARED_ORGANIZATION = ? )" +
+            " AND " +
+            "   APP.ORGANIZATION = ? " +
+            " And "+
+            "    LOWER (NAME) like LOWER (?)"+
+            " )x left join AM_BLOCK_CONDITIONS bl on  ( bl.TYPE = 'APPLICATION' AND bl.BLOCK_CONDITION = concat(concat(x.USER_ID,':'),x.name)) " +
+            " ORDER BY $1 $2 limit ? , ?";
+
 
     public static final String GET_APPLICATIONS_BY_TENANT_ID =
                     "   SELECT " +
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.common/src/main/resources/publisher-api.yaml b/components/apimgt/org.wso2.carbon.apimgt.rest.api.common/src/main/resources/publisher-api.yaml
index ca7602542f8..cbd88d5ea90 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.common/src/main/resources/publisher-api.yaml
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.common/src/main/resources/publisher-api.yaml
@@ -8167,7 +8167,7 @@ paths:
       x-code-samples:
         - lang: Curl
           source: 'curl -k -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8"
-            -H "Content-Type: multipart/form-data" -F policySpecFile=@setHeader.yaml -F policyDefinitionFile=@setHeader.j2
+            -H "Content-Type: multipart/form-data" -F policySpecFile=@setHeader.yaml -F synapsePolicyDefinitionFile=@setHeader.j2
             "https://127.0.0.1:9443/api/am/publisher/v4/apis/96077508-fd01-4fae-bc64-5de0e2baf43c/operation-policies"'
 
 
@@ -8411,7 +8411,7 @@ paths:
       x-code-samples:
         - lang: Curl
           source: 'curl -k -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8"
-            -H "Content-Type: multipart/form-data" -F policySpecFile=@setHeader.yaml -F policyDefinitionFile=@setHeader.j2
+            -H "Content-Type: multipart/form-data" -F policySpecFile=@setHeader.yaml -F synapsePolicyDefinitionFile=@setHeader.j2
             "https://127.0.0.1:9443/api/am/publisher/v4/operation-policies"'
 
   /operation-policies/export:
@@ -9226,6 +9226,12 @@ components:
           enum:
             - PUBLIC
             - SINGLE
+        audiences:
+          type: array
+          description: The audiences of the API for jwt validation. Accepted values are any String values
+          items:
+            type: string
+            example: [ "aud1","aud2","aud3" ]
         lifeCycleStatus:
           type: string
           example: CREATED
@@ -9443,6 +9449,12 @@ components:
           enum:
             - PUBLIC
             - SINGLE
+        audiences:
+          type: array
+          description: The audiences of the API for jwt validation. Accepted values are any String values
+          items:
+            type: string
+            example: [ "aud1","aud2","aud3" ]
         transport:
           type: array
           description: |
@@ -10042,6 +10054,12 @@ components:
         gatewayVendor:
           type: string
           example: wso2
+        audiences:
+          type: array
+          description: The audiences of the API product for jwt validation. Accepted values are any String values
+          items:
+            type: string
+            example: [ "aud1","aud2","aud3" ]
         monetizedInfo:
           type: boolean
           example: true
@@ -10315,6 +10333,12 @@ components:
         workflowStatus:
           type: string
           example: APPROVED
+        audiences:
+          type: array
+          description: The audiences of the API for jwt validation. Accepted values are any String values
+          items:
+            type: string
+            example: [ "aud1","aud2","aud3" ]
     ProductAPI:
       title: ProductAPI
       required:
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/dto/ApplicationDTO.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/dto/ApplicationDTO.java
index 225f12efa07..ec38b804982 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/dto/ApplicationDTO.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/gen/java/org/wso2/carbon/apimgt/rest/api/store/v1/dto/ApplicationDTO.java
@@ -73,6 +73,38 @@ return null;
     private String createdTime = null;
     private String updatedTime = null;
 
+    @XmlType(name="VisibilityEnum")
+    @XmlEnum(String.class)
+    public enum VisibilityEnum {
+        PRIVATE("PRIVATE"),
+        SHARED_WITH_ORG("SHARED_WITH_ORG");
+        private String value;
+
+        VisibilityEnum (String v) {
+            value = v;
+        }
+
+        public String value() {
+            return value;
+        }
+
+        @Override
+        public String toString() {
+            return String.valueOf(value);
+        }
+
+        @JsonCreator
+        public static VisibilityEnum fromValue(String v) {
+            for (VisibilityEnum b : VisibilityEnum.values()) {
+                if (String.valueOf(b.value).equals(v)) {
+                    return b;
+                }
+            }
+return null;
+        }
+    }
+    private VisibilityEnum visibility = null;
+
   /**
    **/
   public ApplicationDTO applicationId(String applicationId) {
@@ -334,6 +366,23 @@ return null;
     this.updatedTime = updatedTime;
   }
 
+  /**
+   **/
+  public ApplicationDTO visibility(VisibilityEnum visibility) {
+    this.visibility = visibility;
+    return this;
+  }
+
+  
+  @ApiModelProperty(value = "")
+  @JsonProperty("visibility")
+  public VisibilityEnum getVisibility() {
+    return visibility;
+  }
+  public void setVisibility(VisibilityEnum visibility) {
+    this.visibility = visibility;
+  }
+
 
   @Override
   public boolean equals(java.lang.Object o) {
@@ -358,12 +407,13 @@ return null;
         Objects.equals(owner, application.owner) &&
         Objects.equals(hashEnabled, application.hashEnabled) &&
         Objects.equals(createdTime, application.createdTime) &&
-        Objects.equals(updatedTime, application.updatedTime);
+        Objects.equals(updatedTime, application.updatedTime) &&
+        Objects.equals(visibility, application.visibility);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hash(applicationId, name, throttlingPolicy, description, tokenType, status, groups, subscriptionCount, keys, attributes, subscriptionScopes, owner, hashEnabled, createdTime, updatedTime);
+    return Objects.hash(applicationId, name, throttlingPolicy, description, tokenType, status, groups, subscriptionCount, keys, attributes, subscriptionScopes, owner, hashEnabled, createdTime, updatedTime, visibility);
   }
 
   @Override
@@ -386,6 +436,7 @@ return null;
     sb.append("    hashEnabled: ").append(toIndentedString(hashEnabled)).append("\n");
     sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
     sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
+    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
     sb.append("}");
     return sb.toString();
   }
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/impl/ApplicationsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/impl/ApplicationsApiServiceImpl.java
index 616753f2b2d..619f74850c8 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/impl/ApplicationsApiServiceImpl.java
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/store/v1/impl/ApplicationsApiServiceImpl.java
@@ -44,6 +44,7 @@ import org.wso2.carbon.apimgt.api.model.AccessTokenInfo;
 import org.wso2.carbon.apimgt.api.model.Application;
 import org.wso2.carbon.apimgt.api.model.ApplicationConstants;
 import org.wso2.carbon.apimgt.api.model.OAuthApplicationInfo;
+import org.wso2.carbon.apimgt.api.model.OrganizationInfo;
 import org.wso2.carbon.apimgt.api.model.Scope;
 import org.wso2.carbon.apimgt.api.model.Subscriber;
 import org.wso2.carbon.apimgt.impl.APIConstants;
@@ -62,6 +63,7 @@ import org.wso2.carbon.apimgt.rest.api.store.v1.dto.APIKeyDTO;
 import org.wso2.carbon.apimgt.rest.api.store.v1.dto.APIKeyGenerateRequestDTO;
 import org.wso2.carbon.apimgt.rest.api.store.v1.dto.APIKeyRevokeRequestDTO;
 import org.wso2.carbon.apimgt.rest.api.store.v1.dto.ApplicationDTO;
+import org.wso2.carbon.apimgt.rest.api.store.v1.dto.ApplicationDTO.VisibilityEnum;
 import org.wso2.carbon.apimgt.rest.api.store.v1.dto.ApplicationInfoDTO;
 import org.wso2.carbon.apimgt.rest.api.store.v1.dto.ApplicationKeyDTO;
 import org.wso2.carbon.apimgt.rest.api.store.v1.dto.ApplicationKeyGenerateRequestDTO;
@@ -137,12 +139,14 @@ public class ApplicationsApiServiceImpl implements ApplicationsApiService {
         groupId = RestApiUtil.getLoggedInUserGroupId();
         try {
             String organization = RestApiUtil.getValidatedOrganization(messageContext);
+            OrganizationInfo orgInfo = RestApiUtil.getOrganizationInfo(messageContext);
             APIConsumer apiConsumer = RestApiCommonUtil.getConsumer(username);
             Subscriber subscriber = new Subscriber(username);
             Application[] applications;
+            String sharedOrganization = orgInfo.getName();
             applications = apiConsumer
                     .getApplicationsWithPagination(new Subscriber(username), groupId, offset, limit, query, sortBy,
-                            sortOrder, organization);
+                            sortOrder, organization, sharedOrganization);
             if (applications != null) {
                 JSONArray applicationAttributesFromConfig = apiConsumer.getAppAttributesFromConfig(username);
                 for (Application application : applications) {
@@ -243,15 +247,16 @@ public class ApplicationsApiServiceImpl implements ApplicationsApiService {
             }
 
             String organization = RestApiUtil.getValidatedOrganization(messageContext);
+            OrganizationInfo orgInfo = RestApiUtil.getOrganizationInfo(messageContext);
 
             if (APIUtil.isApplicationExist(ownerId, applicationDTO.getName(), applicationGroupId, organization) && update != null
                     && update) {
                 int appId = APIUtil.getApplicationId(applicationDTO.getName(), ownerId);
                 Application oldApplication = apiConsumer.getApplicationById(appId);
                 application = preProcessAndUpdateApplication(ownerId, applicationDTO, oldApplication,
-                        oldApplication.getUUID());
+                        oldApplication.getUUID(), orgInfo.getName());
             } else {
-                application = preProcessAndAddApplication(ownerId, applicationDTO, organization);
+                application = preProcessAndAddApplication(ownerId, applicationDTO, organization, orgInfo.getName());
                 update = Boolean.FALSE;
             }
 
@@ -323,7 +328,8 @@ public class ApplicationsApiServiceImpl implements ApplicationsApiService {
             body.setTokenType(ApplicationDTO.TokenTypeEnum.JWT);
 
             String organization = RestApiUtil.getValidatedOrganization(messageContext);
-            Application createdApplication = preProcessAndAddApplication(username, body, organization);
+            OrganizationInfo orgInfo = RestApiUtil.getOrganizationInfo(messageContext);
+            Application createdApplication = preProcessAndAddApplication(username, body, organization, orgInfo.getName());
             ApplicationDTO createdApplicationDTO = ApplicationMappingUtil.fromApplicationtoDTO(createdApplication);
 
             //to be set as the Location header
@@ -356,8 +362,8 @@ public class ApplicationsApiServiceImpl implements ApplicationsApiService {
      * @param organization   Identifier of an organization
      * @return Created application
      */
-    private Application preProcessAndAddApplication(String username, ApplicationDTO applicationDto, String organization)
-            throws APIManagementException {
+    private Application preProcessAndAddApplication(String username, ApplicationDTO applicationDto, String organization,
+            String sharedOrganization) throws APIManagementException {
         APIConsumer apiConsumer = APIManagerFactory.getInstance().getAPIConsumer(username);
 
         //validate the tier specified for the application
@@ -375,6 +381,12 @@ public class ApplicationsApiServiceImpl implements ApplicationsApiService {
 
         //subscriber field of the body is not honored. It is taken from the context
         Application application = ApplicationMappingUtil.fromDTOtoApplication(applicationDto, username);
+        
+        application.setSharedOrganization(APIConstants.DEFAULT_APP_SHARING_KEYWORD); // default
+        if ((applicationDto.getVisibility() != null)
+                && applicationDto.getVisibility() == VisibilityEnum.SHARED_WITH_ORG && sharedOrganization != null) {
+            application.setSharedOrganization(sharedOrganization);
+        } 
 
         int applicationId = apiConsumer.addApplication(application, username, organization);
 
@@ -468,8 +480,9 @@ public class ApplicationsApiServiceImpl implements ApplicationsApiService {
                             "A duplicate application already exists by the name - " + body.getName());
                 }
             }
+            OrganizationInfo orgInfo = RestApiUtil.getOrganizationInfo(messageContext);
             Application updatedApplication = preProcessAndUpdateApplication(username, body, oldApplication,
-                    applicationId);
+                    applicationId, orgInfo.getName());
             ApplicationDTO updatedApplicationDTO = ApplicationMappingUtil.fromApplicationtoDTO(updatedApplication);
             return Response.ok().entity(updatedApplicationDTO).build();
 
@@ -531,7 +544,7 @@ public class ApplicationsApiServiceImpl implements ApplicationsApiService {
      * @return Updated application
      */
     private Application preProcessAndUpdateApplication(String username, ApplicationDTO applicationDto,
-            Application oldApplication, String applicationId) throws APIManagementException {
+            Application oldApplication, String applicationId, String sharedOrganization) throws APIManagementException {
         APIConsumer apiConsumer = APIManagerFactory.getInstance().getAPIConsumer(username);
         Object applicationAttributesFromUser = applicationDto.getAttributes();
         Map<String, String> applicationAttributes = new ObjectMapper()
@@ -547,6 +560,11 @@ public class ApplicationsApiServiceImpl implements ApplicationsApiService {
         //we do not honor the application id which is sent via the request body
         application.setUUID(oldApplication != null ? oldApplication.getUUID() : null);
 
+        application.setSharedOrganization(oldApplication.getSharedOrganization()); // default
+        if ((applicationDto.getVisibility() != null)
+                && applicationDto.getVisibility() == VisibilityEnum.SHARED_WITH_ORG && sharedOrganization != null) {
+            application.setSharedOrganization(sharedOrganization);
+        } 
         apiConsumer.updateApplication(application);
 
         //retrieves the updated application and send as the response
diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/resources/devportal-api.yaml b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/resources/devportal-api.yaml
index b99d43642ed..296ce294b71 100644
--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/resources/devportal-api.yaml
+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.store.v1/src/main/resources/devportal-api.yaml
@@ -4363,6 +4363,11 @@ components:
           type: string
           readOnly: true
           example: 1651555310208
+        visibility:
+          type: string
+          enum:
+            - PRIVATE
+            - SHARED_WITH_ORG
     ApplicationInfo:
       title: Application info object with basic application details
       type: object
diff --git a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/h2.sql b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/h2.sql
index 16a72011705..4687988fc52 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/h2.sql
+++ b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/h2.sql
@@ -1542,6 +1542,7 @@ CREATE TABLE IF NOT EXISTS AM_APPLICATION (
     UUID VARCHAR(256),
     TOKEN_TYPE VARCHAR(10),
     ORGANIZATION VARCHAR(100),
+    SHARED_ORGANIZATION VARCHAR(100),
     FOREIGN KEY(SUBSCRIBER_ID) REFERENCES AM_SUBSCRIBER(SUBSCRIBER_ID) ON UPDATE CASCADE ON DELETE RESTRICT,
     PRIMARY KEY(APPLICATION_ID),
     UNIQUE (NAME,SUBSCRIBER_ID,ORGANIZATION),
diff --git a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql.sql b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql.sql
index a4bace7ddf7..71cbc6bd626 100644
--- a/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql.sql
+++ b/features/apimgt/org.wso2.carbon.apimgt.core.feature/src/main/resources/sql/mysql.sql
@@ -1490,6 +1490,7 @@ CREATE TABLE IF NOT EXISTS AM_APPLICATION (
     UUID VARCHAR(256),
     TOKEN_TYPE VARCHAR(10),
     ORGANIZATION VARCHAR(100),
+    SHARED_ORGANIZATION VARCHAR(100),
     FOREIGN KEY(SUBSCRIBER_ID) REFERENCES AM_SUBSCRIBER(SUBSCRIBER_ID) ON UPDATE CASCADE ON DELETE RESTRICT,
     PRIMARY KEY(APPLICATION_ID),
     UNIQUE (NAME,SUBSCRIBER_ID,ORGANIZATION),
